#!/usr/bin/env node

'use strict';

const config = require('config'),
    _ = require('lodash'),
    mongo = require('models/mongo');

mongo.conn.then(async function(result) {
    const env = await mongo.Environment.getEnv('config');
    if (!_.isEmpty(env)) {
        await mongo.Environment.updateConfig(config, env);
    }

    const http = require('http'),
        app = require('app'),
        log = require('libs/log');

    const port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    const server = http.createServer(app);

    server.listen(port);
    server.on('error', (err) => {
        if (err.syscall !== 'listen') {
            log.errLog.info(JSON.stringify(err));
            throw err;
        }
        err.bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
        log.errLog.info(JSON.stringify(err));
    });

    server.on('listening', () => {
        const addr = server.address();
        const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
        console.log('Listening on ' + bind);
    });
});

function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) { // named pipe
        return val;
    }
    if (port >= 0) { // port number
        return port;
    }
    return false;
}
